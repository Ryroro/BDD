type VarId = Int
type NodeId = Int
type Attributes = (VarId, NodeId, NodeId)
type HTable = [(Attributes, NodeId)]
type TTable = [(NodeId, Attributes)]

type Tokens = [String]

data Atom = Atom String
            deriving Show

data Formula = Or Formula Formula
             | And Formula Formula
             | Imply Formula Formula
             | Iff Formula Formula
             | Not Formula
             | Atom
             deriving Show

data Env = [(String, Bool)]

lookUp :: a -> [(a, b)] -> b
lookUp a abs = fromJust $ lookup a abs

add :: (a, b) -> [(a, b)] -> [(a, b)]
add a abs = a : abs

x = "(a and b) or (c and b) imply d"

reformat :: String -> Tokens
reformat input = (words . addSpaceBracket) input 
  where addSpaceBracket :: String -> String
        addSpaceBracket [] = []
        addSpaceBracket (x:xs)
          | x == '(' = x : ' ' : addSpaceBracket xs
          | otherwise = x : addSpaceBracket xs


transform :: String -> Formula
transform line = transform' tokens
  where tokens = reformat line

        transform' [] stack = head stack
        transform' input@(t:ts) stack
          | t == "(" = transform' rest ((transform' bracketTokens []):stack) 
          | t == "and" = And (head stack) (transform' ts stack) 
          | t == "or" = Or (head stack) (transform' ts stack)
          | t == "imply" = Imply (head stack) (transform' ts stack)
          | t == "iff" = Iff (head stack) (transform' ts stack)
          | isSpace t = transform' ts stack
          | otherwise = transform' ts ((Atom t):stack)
          where bracketTokens = takeWhile (/=")") ts
                rest = drop (length bracketTokens+1) ts
                

imply :: Bool -> Bool -> Bool
imply b1 b2
  | b1 == True && b2 == False = False
  | otherwise = True

iff :: Bool -> Bool -> Bool
iff b1 b2
  | b1 == b2 = True
  | otherwise = False

eval :: Formula -> Env -> Bool
eval f env = case f of
               Or f1 f2    -> eval f1 || eval f2
               And f1 f2   -> eval f1 && eval f2
               Imply f1 f2 -> imply (eval f1) (eval f2)
               Iff f1 f2   -> iff (eval f1) (eval f2)
               Not f1      -> not $ eval f1
               Atom s      -> lookUp s env
               otherwise   -> error "unrecognized formula "

countAtom :: Formula -> Int
countAtom f = case f of
                Atom x -> 1
                Or f1 f2 -> countAtom f1 + countAtom f2
                And f1 f2 -> countAtom f1 + countAtom f2
                Imply f1 f2 -> countAtom f1 + countAtom f2
                Iff f1 f2 -> countAtom f1 + countAtom f2
                Not f1 -> countAtom f1

-- Get the string representation of all the atom
getAtoms :: Formula -> [String]
getAtoms f = case f of
               Atom x -> [x] 
               Or f1 f2 -> getAtoms f1 ++ getAtoms f2
               And f1 f2 -> getAtoms f1 ++ getAtoms f2
               Imply f1 f2 -> getAtoms f1 ++ getAtoms f2
               Iff f1 f2 -> getAtoms f1 ++ getAtoms f2
               Not f1 -> getAtoms f1

toBase :: Int -> Int -> Int -> [Int]
toBase n b c
  | c == 0 = []
  | otherwise n `mod` b : toBase (n `div` b) b (c-1)

allPoss :: Int -> [Int]
allPoss n =  [toBase x 2 n | x <- [0..2^(n-1)]

getAllPoss :: [String] -> [[(String, Bool)]]
getAllPoss atoms = [ zipWith (\s b -> if b == 1
                                      then (s, True)
                                      else (s, False))
                                      atoms p | p <- allPoss']
  where n = length atoms
        allPoss' = allPoss n
